import sys

def main():
    sys.setrecursionlimit(1 << 25)  # Aumentar o limite de recursão, se necessário

    results = []

    # Ler toda a entrada de uma vez e dividir em tokens
    input_data = sys.stdin.read().split()
    idx = 0
    n = len(input_data)

    while idx < n:
        # Ler IP e M
        IP = int(input_data[idx])
        idx += 1
        M = int(input_data[idx])
        idx += 1

        attempts = []
        for _ in range(M):
            PC = int(input_data[idx])
            idx += 1
            NA = int(input_data[idx])
            idx += 1
            attempts.append((PC, NA))

        # Processar o caso de teste
        max_PC = 100000  # Conforme os limites
        size = max_PC + 2  # Tamanho da Árvore Fenwick

        # Inicializar a Árvore Fenwick como uma lista
        tree = [0] * size

        def update(index):
            while index < size:
                tree[index] += 1
                index += index & -index

        def query(index):
            res = 0
            while index > 0:
                res += tree[index]
                index -= index & -index
            return res

        gym_size = 0
        for PC, NA in attempts:
            left = max(1, PC - IP)
            right = min(max_PC, PC + IP)

            count = query(right) - query(left - 1)
            if count <= NA:
                # Inserir o analogimôn no ginásio
                update(PC)
                gym_size += 1
            # Caso contrário, não faz nada (analogimôn não é inserido)

        # Armazenar o resultado para este caso de teste
        results.append(str(gym_size))

    # Imprimir todas as saídas ao final
    print('\n'.join(results))

if __name__ == '__main__':
    main()
